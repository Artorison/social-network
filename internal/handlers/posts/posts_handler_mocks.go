// Code generated by MockGen. DO NOT EDIT.
// Source: posts_handler.go
//
// Generated by this command:
//
//	mockgen -source=posts_handler.go -destination=posts_handler_mocks.go -package=posts
//

// Package posts is a generated GoMock package.
package posts

import (
	context "context"
	models "redditclone/internal/models"
	sessions "redditclone/internal/sessions"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockPostsService is a mock of PostsService interface.
type MockPostsService struct {
	ctrl     *gomock.Controller
	recorder *MockPostsServiceMockRecorder
	isgomock struct{}
}

// MockPostsServiceMockRecorder is the mock recorder for MockPostsService.
type MockPostsServiceMockRecorder struct {
	mock *MockPostsService
}

// NewMockPostsService creates a new mock instance.
func NewMockPostsService(ctrl *gomock.Controller) *MockPostsService {
	mock := &MockPostsService{ctrl: ctrl}
	mock.recorder = &MockPostsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostsService) EXPECT() *MockPostsServiceMockRecorder {
	return m.recorder
}

// AddComment mocks base method.
func (m *MockPostsService) AddComment(ctx context.Context, postID, commentMsg string, ss *sessions.Session) (*models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddComment", ctx, postID, commentMsg, ss)
	ret0, _ := ret[0].(*models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddComment indicates an expected call of AddComment.
func (mr *MockPostsServiceMockRecorder) AddComment(ctx, postID, commentMsg, ss any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddComment", reflect.TypeOf((*MockPostsService)(nil).AddComment), ctx, postID, commentMsg, ss)
}

// CreatePost mocks base method.
func (m *MockPostsService) CreatePost(ctx context.Context, dto models.CreatePostDTO, ss *sessions.Session) (*models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePost", ctx, dto, ss)
	ret0, _ := ret[0].(*models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePost indicates an expected call of CreatePost.
func (mr *MockPostsServiceMockRecorder) CreatePost(ctx, dto, ss any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePost", reflect.TypeOf((*MockPostsService)(nil).CreatePost), ctx, dto, ss)
}

// DeleteComment mocks base method.
func (m *MockPostsService) DeleteComment(ctx context.Context, postID, commentID string) (*models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComment", ctx, postID, commentID)
	ret0, _ := ret[0].(*models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteComment indicates an expected call of DeleteComment.
func (mr *MockPostsServiceMockRecorder) DeleteComment(ctx, postID, commentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockPostsService)(nil).DeleteComment), ctx, postID, commentID)
}

// DeletePost mocks base method.
func (m *MockPostsService) DeletePost(ctx context.Context, postID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePost", ctx, postID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePost indicates an expected call of DeletePost.
func (mr *MockPostsServiceMockRecorder) DeletePost(ctx, postID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePost", reflect.TypeOf((*MockPostsService)(nil).DeletePost), ctx, postID)
}

// DownVote mocks base method.
func (m *MockPostsService) DownVote(ctx context.Context, postID string, ss *sessions.Session) (*models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownVote", ctx, postID, ss)
	ret0, _ := ret[0].(*models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownVote indicates an expected call of DownVote.
func (mr *MockPostsServiceMockRecorder) DownVote(ctx, postID, ss any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownVote", reflect.TypeOf((*MockPostsService)(nil).DownVote), ctx, postID, ss)
}

// GetAllPosts mocks base method.
func (m *MockPostsService) GetAllPosts(ctx context.Context) ([]*models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPosts", ctx)
	ret0, _ := ret[0].([]*models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPosts indicates an expected call of GetAllPosts.
func (mr *MockPostsServiceMockRecorder) GetAllPosts(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPosts", reflect.TypeOf((*MockPostsService)(nil).GetAllPosts), ctx)
}

// GetPostByID mocks base method.
func (m *MockPostsService) GetPostByID(ctx context.Context, postID string) (*models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostByID", ctx, postID)
	ret0, _ := ret[0].(*models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostByID indicates an expected call of GetPostByID.
func (mr *MockPostsServiceMockRecorder) GetPostByID(ctx, postID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostByID", reflect.TypeOf((*MockPostsService)(nil).GetPostByID), ctx, postID)
}

// GetPostsByCategory mocks base method.
func (m *MockPostsService) GetPostsByCategory(ctx context.Context, category string) ([]*models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostsByCategory", ctx, category)
	ret0, _ := ret[0].([]*models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostsByCategory indicates an expected call of GetPostsByCategory.
func (mr *MockPostsServiceMockRecorder) GetPostsByCategory(ctx, category any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostsByCategory", reflect.TypeOf((*MockPostsService)(nil).GetPostsByCategory), ctx, category)
}

// GetUserPosts mocks base method.
func (m *MockPostsService) GetUserPosts(ctx context.Context, username string) ([]*models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPosts", ctx, username)
	ret0, _ := ret[0].([]*models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPosts indicates an expected call of GetUserPosts.
func (mr *MockPostsServiceMockRecorder) GetUserPosts(ctx, username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPosts", reflect.TypeOf((*MockPostsService)(nil).GetUserPosts), ctx, username)
}

// UnVote mocks base method.
func (m *MockPostsService) UnVote(ctx context.Context, postID string, ss *sessions.Session) (*models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnVote", ctx, postID, ss)
	ret0, _ := ret[0].(*models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnVote indicates an expected call of UnVote.
func (mr *MockPostsServiceMockRecorder) UnVote(ctx, postID, ss any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnVote", reflect.TypeOf((*MockPostsService)(nil).UnVote), ctx, postID, ss)
}

// UpVote mocks base method.
func (m *MockPostsService) UpVote(ctx context.Context, postID string, ss *sessions.Session) (*models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpVote", ctx, postID, ss)
	ret0, _ := ret[0].(*models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpVote indicates an expected call of UpVote.
func (mr *MockPostsServiceMockRecorder) UpVote(ctx, postID, ss any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpVote", reflect.TypeOf((*MockPostsService)(nil).UpVote), ctx, postID, ss)
}
